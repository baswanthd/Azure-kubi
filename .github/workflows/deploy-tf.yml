# This is a basic workflow to help you get started with Actions

name: deploy-tf

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:

    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"

  infra_eastus_azurerm:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VERSION: 1.7.0

    defaults:
      run:
        working-directory: ./terraform

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
          
      # - name: Terraform fmt
      #   id: fmt
      #   run: TF_LOG=debug terraform fmt #-check
      #   #continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: |
          set -a
          source ../.env.backend
          terraform init \
          -backend-config="resource_group_name=$TF_VAR_state_resource_group_name" \
          -backend-config="storage_account_name=$TF_VAR_state_storage_account_name"
              
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tf.out #-destroy
        #continue-on-error: true

      - name: Terraform Apply
        id: apply
        run: terraform apply tf.out